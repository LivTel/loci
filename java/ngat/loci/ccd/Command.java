// Command.java
package ngat.loci.ccd;

import java.io.*;
import java.lang.*;
import java.net.*;
import java.text.*;

import org.json.*;

import ngat.flask.EndPoint;
import ngat.util.logging.*;

/**
 * The Command class is the base class for sending a command and getting a reply from the
 * Loci camera API. This is a Flask end-point.
 * @author Chris Mottram
 * @version $Revision$
 */
public class Command implements Runnable
{
	/**
	 * Revision Control System id string, showing the version of the Class.
	 */
	public final static String RCSID = new String("$Id$");
	/**
	 * Constant defining the log level to send for error messages generated by instances of this class.
	 */
	public final static int LOG_LEVEL_ERROR = 1;
	/**
	 * Flask end-point instance.
	 */
	protected EndPoint endPoint = null;
	/**
	 * The Loco end-point name.
	 */
	protected String endPointName = null;
	/**
	 * Exception generated by the Flask end-point if called via the run method.
	 * @see #run
	 */
	protected Exception runException = null;
	/**
	 * Boolean set to true, when a command has been sent to the server and
	 * a reply string has been sent.
	 * @see #run
	 */
	protected boolean commandFinished = false;
	/**
	 * The logger to report errors to.
	 */
	protected Logger logger = null;
	
	/**
	 * Default constructor. Construct the logger. Construct the Flask end-point.
	 * @see #logger
	 * @see #endPoint
	 */
	public Command()
	{
		super();
		logger = LogManager.getLogger(this);
		endPoint = new EndPoint();
	}

	/**
	 * Constructor. Construct the logger. Construct the Flask end-point.
	 * @param address A string representing the address of the end-point, i.e. "loci1",
	 *     "localhost".
	 * @param portNumber An integer representing the port number the end-point is listening on.
	 * @see #logger
	 * @see #endPoint
	 */
	public Command(String address,int portNumber)
	{
		super();
		logger = LogManager.getLogger(this);
		endPoint = new EndPoint();
		endPoint.setIPAddress(address);
		endPoint.setPortNumber(portNumber);
	}

	/**
	 * Set the address.
	 * @param address A string representing the address of the end-point, i.e. "loci", "localhost".
	 * @exception UnknownHostException Thrown if the address in unknown.
	 * @see #endPoint
	 * @see ngat.flask.EndPoint#setIPAddress
	 */
	public void setAddress(String address) throws UnknownHostException
	{
		endPoint.setIPAddress(address);
	}

	/**
	 * Set the port number.
	 * @param portNumber An integer representing the port number the end-point is listening on.
	 * @see #endPoint
	 * @see ngat.flask.EndPoint#setPortNumber
	 */
	public void setPortNumber(int portNumber)
	{
		endPoint.setPortNumber(portNumber);
	}

	/**
	 * Run thread. Just invokes the end-point's run method.
	 * @see #endPoint
	 * @see ngat.flask.EndPoint#run
	 */
	public void run()
	{
		logger.log(Logging.VERBOSITY_INTERMEDIATE,this.getClass().getName()+":run:started.");
		endPoint.run();
		commandFinished = true;
		logger.log(Logging.VERBOSITY_INTERMEDIATE,this.getClass().getName()+":run:finished.");
	}

	/**
	 * Return a copy of the Http Response Code generated by the server when responding to the end-point request.
	 * This is normally 200 (HTTP_OK) if the call succeeded.
	 * @return The Http Response Code.
	 * @see #endPoint
	 * @see ngat.flask.EndPoint#getHttpResponseCode
	 */
	public int getHttpResponseCode()
	{
		return endPoint.getHttpResponseCode();
	}
	
	/**
	 * Return an exception generated when an end-point call is invoked via a Thread (run method).
	 * @return An exception if one was generated during an end-point call, or null otherwise.
	 * @see #endPoint
	 * @see ngat.flask.EndPoint#getRunException
	 */
	public Exception getRunException()
	{
		return endPoint.getRunException();
	}
	
	/**
	 * Return the command return status returned by the Flask end-point.
	 * @return A string, the reply status returned by the Flask end-point 
	 *         (with the JSON key 'status').
	 * @see #endPoint
	 * @exception JSONException Thrown if the key is not found or if the value is not a string.
	 */
	public String getReturnStatus() throws org.json.JSONException
	{
		return endPoint.getReturnValueString("status");
	}

	/**
	 * Return whether the command return status returned by the Flask end-point was "Success".
	 * @return A boolean, true if the reply status returned by the Flask end-point 
	 *         (with the JSON key 'status') was "Success", false otherwise.
	 * @see #endPoint
	 */	
	public boolean isReturnStatusSuccess() throws org.json.JSONException
	{
		String returnStatusString;
		boolean success;
		
		try
		{
			returnStatusString = getReturnStatus();
			success = returnStatusString.equals("Success");
		}
		catch(Exception e)
		{
			success = false;
		}
		return success;
	}
	
	/**
	 * Get whether the command has been completed.
	 * @return A Boolean, true if a command has been sent, and a reply received and parsed. false if the
	 *     command has not been sent yet, or we are still waiting for a reply.
	 * @see #commandFinished
	 */
	public boolean getCommandFinished()
	{
		return commandFinished;
	}

	/**
	 * A simple class method to setup console logging for testing the ngat.loci.ccd package 
	 * from the command line.
	 */
	public static void initialiseLogging()
	{
		Logger l = null;
		LogHandler handler = null;
		BogstanLogFormatter blf = null;
		String loggerNameStringArray[] = {"ngat.flask.EndPoint",
						  "ngat.loci.ccd.Command",
						  "ngat.loci.ccd.AbortExposureCommand",
						  "ngat.loci.ccd.GetTemperatureCommand",
						  "ngat.loci.ccd.SetTemperatureCommand",
						  "ngat.loci.ccd.TakeBiasFrameCommand",
						  "ngat.loci.ccd.TakeDarkFrameCommand",
						  "ngat.loci.ccd.TakeExposureCommand"};
		
		blf = new BogstanLogFormatter();
		blf.setDateFormat(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS z"));
		handler = new ConsoleLogHandler(blf);
		handler.setLogLevel(Logging.ALL);
		for(int index = 0; index < loggerNameStringArray.length; index ++)
		{
			l = LogManager.getLogger(loggerNameStringArray[index]);
			l.setLogLevel(Logging.ALL);
			l.addHandler(handler);
		}
	}
}
